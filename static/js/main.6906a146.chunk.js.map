{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["SearchBox","props","useState","query","inprogressQuery","setInprogressQuery","useEffect","value","onChange","e","target","trim","replace","onKeyUp","key","includes","setQuery","window","alert","SearchResults","console","log","results","map","element","href","url","score","App","setResults","searchAndSetQuery","q","params","URLSearchParams","set","toString","fetch","then","res","json","result","error","search","location","foo","get","className","currentUrlParams","history","replaceState","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wLAIA,SAASA,EAAUC,GAAQ,IAAD,EAEsBC,mBAASD,EAAME,OAFrC,mBAEjBC,EAFiB,KAEAC,EAFA,KAQxBC,qBAAU,WACRD,EAAmBJ,EAAME,SACxB,CAACF,EAAME,QAUV,OAAQ,8BACN,0BAAUI,MAAOH,EAAiBI,SAjBf,SAACC,GACpBJ,EAAmBI,EAAEC,OAAOH,MAAMI,OAAOC,QAAQ,SAAU,MAgBDC,QAAS,SAACJ,GAAD,MAAkB,UAAVA,EAAEK,SARxEV,EAAgBW,SAAS,UAI9Bd,EAAMe,SAASZ,GAHba,OAAOC,MAAM,8BAO2F,OAI9G,SAASC,EAAclB,GAErB,OADAmB,QAAQC,IAAIpB,GACJ,8BACLA,EAAMqB,QAAQC,KAAI,SAAAC,GACjB,OAAO,8BACL,mBAAGC,KAAMD,EAAQE,IAAjB,SAAuBF,EAAQE,MAD1B,KACqCF,EAAQG,MAD7C,MAAQH,EAAQE,UAsDdE,MAhDf,WAAgB,IAAD,EAEa1B,mBAAS,IAFtB,mBAENC,EAFM,KAECa,EAFD,OAGiBd,mBAAS,IAH1B,mBAGNoB,EAHM,KAGGO,EAHH,KAKPC,EAAoB,SAACC,GACzBX,QAAQC,IAAI,aACZL,EAASe,GACT,IAAIC,EAAS,IAAIC,gBACjBD,EAAOE,IAAI,IAAKH,GAChB,IAAML,EAAM,6BAA+BM,EAAOG,WAClDf,QAAQC,IAAIK,GACZU,MAAMV,GACHW,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACCX,EAAWW,MAEb,SAACC,GACCrB,QAAQC,IAAI,aAoBpB,OAfAf,qBAAU,WACR,IAAIoC,EAASzB,OAAO0B,SAASD,OAEzBE,EADS,IAAIX,gBAAgBS,GAChBG,IAAI,KACrBf,EAAkBc,KACjB,IAWD,sBAAKE,UAAU,MAAf,UACE,4CACA,cAAC9C,EAAD,CAAWG,MAAOA,EAAOa,SAXP,SAACe,GACrB,IAAIgB,EAAmB,IAAId,gBAAgBhB,OAAO0B,SAASD,QAC3DK,EAAiBb,IAAI,IAAKH,GAE1Bd,OAAO+B,QAAQC,aAAa,KAAM,KAAM,IAAIF,EAAiBZ,YAC7DL,EAAkBC,MAOhB,cAACZ,EAAD,CAAeG,QAASA,QCtEf4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.6906a146.chunk.js","sourcesContent":["import { useCallback, useRef, useEffect, useState } from \"react\";\nimport './App.css';\n\n\nfunction SearchBox(props) {\n\n  const [inprogressQuery, setInprogressQuery] = useState(props.query);\n\n  const handleChange = (e) => {\n    setInprogressQuery(e.target.value.trim().replace(/\\n|\\r/g, \"\"));\n  }\n\n  useEffect(() => {\n    setInprogressQuery(props.query)\n  }, [props.query]);\n\n  const submit = () => {\n    if (!inprogressQuery.includes(\"<mask>\")) {\n      window.alert(\"query must contain <mask>\");\n      return;\n    }\n    props.setQuery(inprogressQuery);\n  }\n\n  return (<div>\n    <textarea value={inprogressQuery} onChange={handleChange} onKeyUp={(e) => (e.key === \"Enter\" ? submit() : 0)}/>\n  </div>);\n}\n\nfunction SearchResults(props) {\n  console.log(props);\n  return (<div>\n    {props.results.map(element => {\n      return <p key={element.url}>\n        <a href={element.url}>{element.url}</a> ({element.score})</p>\n    })}\n  </div>);\n}\n\nfunction App() {\n\n  const [query, setQuery] = useState(\"\");\n  const [results, setResults] = useState([]);\n\n  const searchAndSetQuery = (q) => {\n    console.log(\"do search\");\n    setQuery(q);\n    let params = new URLSearchParams();\n    params.set('q', q);\n    const url = \"https://exa.sh/api/search?\" + params.toString();\n    console.log(url);\n    fetch(url)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          setResults(result);\n        },\n        (error) => {\n          console.log(\"ERROR\");\n        }\n      )\n  }\n\n  useEffect(() => {\n    let search = window.location.search;\n    let params = new URLSearchParams(search);\n    let foo = params.get('q');\n    searchAndSetQuery(foo);\n  }, [])\n\n  const setQueryParam = (q) => {\n    let currentUrlParams = new URLSearchParams(window.location.search);\n    currentUrlParams.set('q', q);\n    // window.history.push(window.location.pathname + \"?\" + currentUrlParams.toString());\n    window.history.replaceState(null, null, \"?\"+currentUrlParams.toString());\n    searchAndSetQuery(q);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>exa search</h1>\n      <SearchBox query={query} setQuery={setQueryParam}/>\n      <SearchResults results={results}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}